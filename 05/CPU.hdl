// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	// Hack Language Instructions
	And(a=instruction[15],b=true,out=C); // C Instruktion wenn ins[15]=1
	Not(in=C,out=A); // wenn nicht C dann A bzw. ins[15]=0
	
	And(a=instruction[5],b=C,out=CnDestA); // gucken ob C und dest1 == A
	Mux16(a=instruction,b=outALU,sel=CnDestA,out=RegA);
	Or(a=CnDestA,b=A,out=lA); // wenn CnDestA oder A dann lade A
	
	ARegister(in=RegA,load=lA,out=outRegA); // gegebener A Register
	Mux16(a=outRegA,b=inM,sel=instruction[12],out=MorA); // wenn ins[12] bzw. a = 0 dann A sonst M
	And(a=instruction[4],b=C,out=lD); // wenn C und dest2 = 1 dann lade D mit
	DRegister(in=outALU,load=lD,out=outRegD); // gegebener D Register
	
	ALU(x=outRegD,y=MorA,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outALU,zr=zero,ng=negative);
	//Jumps
	Or(a=negative,b=zero,out=out1);
	Not(in=out1,out=out2);
	And(a=instruction[2],b=negative,out=JLT);
	And(a=instruction[1],b=zero,out=JEQ);
	And(a=instruction[0],b=out2,out=JGT);
	Or(a=JEQ,b=JLT,out=JLE);
	Or(a=JGT,b=JLE,out=JMP);
	
	// Outputs
	And16(a=outRegA,b=true,out[0..14]=addressM);
	And16(a=outALU,b=true,out=outM);
	And(a=instruction[3],b=C,out=writeM);
	
	//PC
	And(a=JMP,b=C,out=Pc);
	Not(in=Pc,out=Pc2);
	PC(in=outRegA,inc=Pc2,load=Pc,reset=reset,out[0..14]=pc);
}