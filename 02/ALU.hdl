// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	// Put you code here:
	//Zero x input if zx=1
	Not16(in=x,out=N16out1);
	And16(a=x,b=N16out1,out=Aout1); //Aout1 = 16Bit x 0
	Mux16(a=x,b=Aout1,sel=zx,out=Mout1); //Mout1 = x or 0
   
	//Negate the x input
	Not16(in=Mout1,out=N16out2);
	Mux16(a=Mout1,b=N16out2,sel=nx,out=Mout2); //Mout2 = x or !x
   
	//Zero the y input if zy=1
	Not16(in=y,out=N16out3);
	And16(a=y,b=N16out3,out=Aout2); //Aout2 = 16Bit x 0
	Mux16(a=y,b=Aout2,sel=zy,out=Mout3); //Mout3 = y or 0
   
	//Negate the y input
	Not16(in=Mout3,out=N16out4);
	Mux16(a=Mout3,b=N16out4,sel=ny,out=Mout4); //Mout4 = y or !y
  
	//compute out = x+y if(1) else x&y
    Add16(a=Mout2,b=Mout4,out=Addout1);
	And16(a=Mout2,b=Mout4,out=Aout3);
	Mux16(a=Aout3,b=Addout1,sel=f,out=Mout5); // Mout5 = out
	
	//if (no == 1) => !out
	Not16(in=Mout5,out=N16out5);
	Mux16(a=Mout5,b=N16out5,sel=no,out=out);
	
	//duplicate out for out cases
	Mux16(a=Mout5,b=N16out5,sel=no,out[0..7]=Mout6,out[8..15]=Mout7);
	Mux16(a=Mout5,b=N16out5,sel=no,out[0..14]=Unused,out[15]=Mout8);
	//if (out == 0) set zr = 1
	Or8Way(in=Mout6,out=Or8out1);
	Or8Way(in=Mout7,out=Or8out2);
	Or(a=Or8out1,b=Or8out2,out=Aout4);
	Mux(a=true,b=false,sel=Aout4,out=zr);
	
	//if (out < 0) set ng = 1
	Or(a=Mout8,b=false,out=ng);
}